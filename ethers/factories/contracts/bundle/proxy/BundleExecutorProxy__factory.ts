/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  BundleExecutorProxy,
  BundleExecutorProxyInterface,
} from "../../../../contracts/bundle/proxy/BundleExecutorProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
      {
        internalType: "address",
        name: "bridge_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "destroy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161019538038061019583398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a05160df6100b66000396000607c015260006020015260df6000f3fe608060405260043610601c5760003560e01c806383197ef0146045575b60437f00000000000000000000000000000000000000000000000000000000000000006057565b005b348015605057600080fd5b506043607a565b3660008037600080366000845af43d6000803e8080156075573d6000f35b3d6000fd5b7f000000000000000000000000000000000000000000000000000000000000000033811460a657600080fd5b33fffea26469706673582212205fbedd4bd107f000bdac7341a62ca6e8a5e67f13c4e450338befec4afb7a38e064736f6c63430008090033";

type BundleExecutorProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BundleExecutorProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BundleExecutorProxy__factory extends ContractFactory {
  constructor(...args: BundleExecutorProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BundleExecutorProxy";
  }

  override deploy(
    implementation_: PromiseOrValue<string>,
    bridge_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BundleExecutorProxy> {
    return super.deploy(
      implementation_,
      bridge_,
      overrides || {}
    ) as Promise<BundleExecutorProxy>;
  }
  override getDeployTransaction(
    implementation_: PromiseOrValue<string>,
    bridge_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      implementation_,
      bridge_,
      overrides || {}
    );
  }
  override attach(address: string): BundleExecutorProxy {
    return super.attach(address) as BundleExecutorProxy;
  }
  override connect(signer: Signer): BundleExecutorProxy__factory {
    return super.connect(signer) as BundleExecutorProxy__factory;
  }
  static readonly contractName: "BundleExecutorProxy";

  public readonly contractName: "BundleExecutorProxy";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BundleExecutorProxyInterface {
    return new utils.Interface(_abi) as BundleExecutorProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BundleExecutorProxy {
    return new Contract(address, _abi, signerOrProvider) as BundleExecutorProxy;
  }
}
