/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  WrappedNativeMock,
  WrappedNativeMockInterface,
} from "../../../../contracts/mocks/tokens/WrappedNativeMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405180604001604052806011815260200170577261707065644e61746976654d6f636b60781b81525060405180604001604052806003815260200162574e4d60e81b8152508160039080519060200190620000709291906200008f565b508051620000869060049060208401906200008f565b50505062000172565b8280546200009d9062000135565b90600052602060002090601f016020900481019282620000c157600085556200010c565b82601f10620000dc57805160ff19168380011785556200010c565b828001600101855582156200010c579182015b828111156200010c578251825591602001919060010190620000ef565b506200011a9291506200011e565b5090565b5b808211156200011a57600081556001016200011f565b600181811c908216806200014a57607f821691505b602082108114156200016c57634e487b7160e01b600052602260045260246000fd5b50919050565b610bfe80620001826000396000f3fe6080604052600436106100c25760003560e01c8063395093511161007f578063a457c2d711610059578063a457c2d71461020a578063a9059cbb1461022a578063d0e30db01461024a578063dd62ed3e1461025257600080fd5b8063395093511461019f57806370a08231146101bf57806395d89b41146101f557600080fd5b806306fdde03146100c7578063095ea7b3146100f257806318160ddd1461012257806323b872dd146101415780632e1a7d4d14610161578063313ce56714610183575b600080fd5b3480156100d357600080fd5b506100dc610272565b6040516100e99190610a03565b60405180910390f35b3480156100fe57600080fd5b5061011261010d366004610a74565b610304565b60405190151581526020016100e9565b34801561012e57600080fd5b506002545b6040519081526020016100e9565b34801561014d57600080fd5b5061011261015c366004610a9e565b61031c565b34801561016d57600080fd5b5061018161017c366004610ada565b610340565b005b34801561018f57600080fd5b50604051601281526020016100e9565b3480156101ab57600080fd5b506101126101ba366004610a74565b61037b565b3480156101cb57600080fd5b506101336101da366004610af3565b6001600160a01b031660009081526020819052604090205490565b34801561020157600080fd5b506100dc61039d565b34801561021657600080fd5b50610112610225366004610a74565b6103ac565b34801561023657600080fd5b50610112610245366004610a74565b61042c565b61018161043a565b34801561025e57600080fd5b5061013361026d366004610b15565b610446565b60606003805461028190610b48565b80601f01602080910402602001604051908101604052809291908181526020018280546102ad90610b48565b80156102fa5780601f106102cf576101008083540402835291602001916102fa565b820191906000526020600020905b8154815290600101906020018083116102dd57829003601f168201915b5050505050905090565b600033610312818585610471565b5060019392505050565b60003361032a858285610596565b610335858585610610565b506001949350505050565b61034a33826107de565b604051339082156108fc029083906000818181858888f19350505050158015610377573d6000803e3d6000fd5b5050565b60003361031281858561038e8383610446565b6103989190610b99565b610471565b60606004805461028190610b48565b600033816103ba8286610446565b90508381101561041f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6103358286868403610471565b600033610312818585610610565b6104443334610924565b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104d35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610416565b6001600160a01b0382166105345760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610416565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006105a28484610446565b9050600019811461060a57818110156105fd5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610416565b61060a8484848403610471565b50505050565b6001600160a01b0383166106745760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610416565b6001600160a01b0382166106d65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610416565b6001600160a01b0383166000908152602081905260409020548181101561074e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610416565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610785908490610b99565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107d191815260200190565b60405180910390a361060a565b6001600160a01b03821661083e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610416565b6001600160a01b038216600090815260208190526040902054818110156108b25760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610416565b6001600160a01b03831660009081526020819052604081208383039055600280548492906108e1908490610bb1565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610589565b6001600160a01b03821661097a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610416565b806002600082825461098c9190610b99565b90915550506001600160a01b038216600090815260208190526040812080548392906109b9908490610b99565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b81811015610a3057858101830151858201604001528201610a14565b81811115610a42576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a6f57600080fd5b919050565b60008060408385031215610a8757600080fd5b610a9083610a58565b946020939093013593505050565b600080600060608486031215610ab357600080fd5b610abc84610a58565b9250610aca60208501610a58565b9150604084013590509250925092565b600060208284031215610aec57600080fd5b5035919050565b600060208284031215610b0557600080fd5b610b0e82610a58565b9392505050565b60008060408385031215610b2857600080fd5b610b3183610a58565b9150610b3f60208401610a58565b90509250929050565b600181811c90821680610b5c57607f821691505b60208210811415610b7d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610bac57610bac610b83565b500190565b600082821015610bc357610bc3610b83565b50039056fea26469706673582212206e0beb2f3b7ad65362fad371eeb8b8c9c122a4db6f98f274c110ce5a23bf8c3d64736f6c63430008090033";

type WrappedNativeMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WrappedNativeMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WrappedNativeMock__factory extends ContractFactory {
  constructor(...args: WrappedNativeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "WrappedNativeMock";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WrappedNativeMock> {
    return super.deploy(overrides || {}) as Promise<WrappedNativeMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): WrappedNativeMock {
    return super.attach(address) as WrappedNativeMock;
  }
  override connect(signer: Signer): WrappedNativeMock__factory {
    return super.connect(signer) as WrappedNativeMock__factory;
  }
  static readonly contractName: "WrappedNativeMock";

  public readonly contractName: "WrappedNativeMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WrappedNativeMockInterface {
    return new utils.Interface(_abi) as WrappedNativeMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WrappedNativeMock {
    return new Contract(address, _abi, signerOrProvider) as WrappedNativeMock;
  }
}
