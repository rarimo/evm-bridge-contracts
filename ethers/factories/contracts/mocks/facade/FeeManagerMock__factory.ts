/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  FeeManagerMock,
  FeeManagerMockInterface,
} from "../../../../contracts/mocks/facade/FeeManagerMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
    ],
    name: "AddedFeeToken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
    ],
    name: "RemovedFeeToken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
    ],
    name: "UpdatedFeeToken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "WithdrawnFeeToken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bridge_",
        type: "address",
      },
    ],
    name: "__FeeManagerMock_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bridge_",
        type: "address",
      },
    ],
    name: "__FeeManager_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "feeTokens",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "feeAmounts",
            type: "uint256[]",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct IFeeManager.AddFeeTokenParameters",
        name: "params_",
        type: "tuple",
      },
    ],
    name: "addFeeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feeToken_",
        type: "address",
      },
    ],
    name: "getCommission",
    outputs: [
      {
        internalType: "uint256",
        name: "commission_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "feeTokens",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "feeAmounts",
            type: "uint256[]",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct IFeeManager.RemoveFeeTokenParameters",
        name: "params_",
        type: "tuple",
      },
    ],
    name: "removeFeeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "feeTokens",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "feeAmounts",
            type: "uint256[]",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct IFeeManager.UpdateFeeTokenParameters",
        name: "params_",
        type: "tuple",
      },
    ],
    name: "updateFeeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation_",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "signature_",
        type: "bytes",
      },
    ],
    name: "upgradeToWithSig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "feeTokens",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct IFeeManager.WithdrawFeeTokenParameters",
        name: "params_",
        type: "tuple",
      },
    ],
    name: "withdrawFeeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b5060805161200161005a60003960008181610268015281816102b10152818161050601528181610546015281816105bc015281816105fc015261067a01526120016000f3fe6080604052600436106100a75760003560e01c806363925ea21161006457806363925ea2146101695780639f33cf2214610189578063a77c8c86146101a9578063e78cea92146101c9578063f0653a2814610207578063f334dcb21461022757600080fd5b80633659cfe6146100ac5780634915b86e146100ce5780634eb5943a146100ee5780634f1ef2861461010e57806352d046611461012157806352d1902d14610141575b600080fd5b3480156100b857600080fd5b506100cc6100c7366004611846565b61025d565b005b3480156100da57600080fd5b506100cc6100e9366004611879565b61034c565b3480156100fa57600080fd5b506100cc610109366004611879565b610438565b6100cc61011c36600461191d565b6104fb565b34801561012d57600080fd5b506100cc61013c3660046119ae565b6105b1565b34801561014d57600080fd5b5061015661066d565b6040519081526020015b60405180910390f35b34801561017557600080fd5b506100cc610184366004611879565b610720565b34801561019557600080fd5b506100cc6101a4366004611a31565b6107e3565b3480156101b557600080fd5b506100cc6101c4366004611846565b6108bb565b3480156101d557600080fd5b506000546101ef906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610160565b34801561021357600080fd5b506100cc610222366004611846565b610950565b34801561023357600080fd5b50610156610242366004611846565b6001600160a01b031660009081526001602052604090205490565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156102af5760405162461bcd60e51b81526004016102a690611a6c565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166102e16109c7565b6001600160a01b0316146103075760405162461bcd60e51b81526004016102a690611ab8565b610310816109e3565b6103498160005b6040519080825280601f01601f191660200182016040528015610341576020820181803683370190505b506000610a3a565b50565b6103596020820182611b04565b90506103658280611b04565b9050146103845760405162461bcd60e51b81526004016102a690611b55565b6103b360005b6103948380611b04565b6103a16020860186611b04565b6103ae6040880188611b98565b610bb4565b60005b6103c08280611b04565b9050811015610434576104246103d68380611b04565b838181106103e6576103e6611bdf565b90506020020160208101906103fb9190611846565b6104086020850185611b04565b8481811061041857610418611bdf565b90506020020135610cf7565b61042d81611bf5565b90506103b6565b5050565b6104456020820182611b04565b90506104518280611b04565b9050146104705760405162461bcd60e51b81526004016102a690611b55565b61047a600161038a565b60005b6104878280611b04565b9050811015610434576104eb61049d8380611b04565b838181106104ad576104ad611bdf565b90506020020160208101906104c29190611846565b6104cf6020850185611b04565b848181106104df576104df611bdf565b90506020020135610dae565b6104f481611bf5565b905061047d565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105445760405162461bcd60e51b81526004016102a690611a6c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105766109c7565b6001600160a01b03161461059c5760405162461bcd60e51b81526004016102a690611ab8565b6105a5826109e3565b61043482826001610a3a565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105fa5760405162461bcd60e51b81526004016102a690611a6c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661062c6109c7565b6001600160a01b0316146106525760405162461bcd60e51b81526004016102a690611ab8565b61065d838383610e78565b610668836000610317565b505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461070d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016102a6565b50600080516020611f8583398151915290565b61072d6020820182611b04565b90506107398280611b04565b9050146107585760405162461bcd60e51b81526004016102a690611b55565b610762600261038a565b60005b61076f8280611b04565b9050811015610434576107d36107858380611b04565b8381811061079557610795611bdf565b90506020020160208101906107aa9190611846565b6107b76020850185611b04565b848181106107c7576107c7611bdf565b90506020020135610f42565b6107dc81611bf5565b9050610765565b6107f06040820182611b04565b90506107ff6020830183611b04565b90501461081e5760405162461bcd60e51b81526004016102a690611b55565b61082781610ff8565b60005b6108376020830183611b04565b9050811015610434576108ab6108506020840184611846565b61085d6020850185611b04565b8481811061086d5761086d611bdf565b90506020020160208101906108829190611846565b61088f6040860186611b04565b8581811061089f5761089f611bdf565b9050602002013561116b565b6108b481611bf5565b905061082a565b600054610100900460ff166109265760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016102a6565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b600061095c60016112ed565b90508015610974576000805461ff0019166101001790555b61097d826108bb565b8015610434576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b600080516020611f85833981519152546001600160a01b031690565b60405162461bcd60e51b815260206004820152602660248201527f4665654d616e616765723a20746869732075706772616465206d6574686f642060448201526534b99037b33360d11b60648201526084016102a6565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610a6d576106688361137a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610aa657600080fd5b505afa925050508015610ad6575060408051601f3d908101601f19168201909252610ad391810190611c1e565b60015b610b395760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016102a6565b600080516020611f858339815191528114610ba85760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016102a6565b50610668838383611416565b6000805460405163413f04cf60e11b815260ff8a166004820152306024820152620100009091046001600160a01b031691908190839063827e099e9060440160006040518083038186803b158015610c0b57600080fd5b505afa158015610c1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c479190810190611c63565b9150915060008130848d8d8d8d8d604051602001610c6c989796959493929190611d50565b60408051601f19818403018152908290528051602090910120630e3754f960e41b825291506001600160a01b0385169063e3754f9090610cb8908e90309086908c908c90600401611de8565b600060405180830381600087803b158015610cd257600080fd5b505af1158015610ce6573d6000803e3d6000fd5b505050505050505050505050505050565b6001600160a01b03821660009081526001602052604090205415610d5d5760405162461bcd60e51b815260206004820181905260248201527f4665654d616e616765723a20746f6b656e20616c72656164792065786973747360448201526064016102a6565b6001600160a01b038216600081815260016020908152604091829020849055815192835282018390527f5d966ab5c51224ee3c5146e53a0b57969d97d0e1779f52a1017813c13344efc491016109bb565b6001600160a01b0382166000908152600160205260409020548114610e275760405162461bcd60e51b815260206004820152602960248201527f4665654d616e616765723a2077726f6e6720746f6b656e2061646472657373206044820152681bdc88185b5bdd5b9d60ba1b60648201526084016102a6565b6001600160a01b038216600081815260016020908152604080832092909255815192835282018390527feac220a493a0693e32f1240aae311de65b2d84391a9ba8310fcaf359d7c9bd8f91016109bb565b6001600160a01b038316610ece5760405162461bcd60e51b815260206004820152601860248201527f4665654d616e616765723a207a65726f2061646472657373000000000000000060448201526064016102a6565b6000546201000090046001600160a01b0316637d1e764b6004308686866040518663ffffffff1660e01b8152600401610f0b959493929190611e19565b600060405180830381600087803b158015610f2557600080fd5b505af1158015610f39573d6000803e3d6000fd5b50505050505050565b6001600160a01b038216600090815260016020526040902054610fa75760405162461bcd60e51b815260206004820152601f60248201527f4665654d616e616765723a20746f6b656e20646f65736e27742065786973740060448201526064016102a6565b6001600160a01b038216600081815260016020908152604091829020849055815192835282018390527f70698787bb7456af2d4339ba1e7d059c4eda7c473412e7ed2c0d5b361a49d50a91016109bb565b6000805460405163413f04cf60e11b81526003600482018190523060248301526001600160a01b03620100009093049290921692908190849063827e099e9060440160006040518083038186803b15801561105257600080fd5b505afa158015611066573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261108e9190810190611c63565b90925090506000816110a36020880188611846565b3085876110b360208c018c611b04565b6110c060408e018e611b04565b6040516020016110d899989796959493929190611e4f565b60408051601f19818403018152919052805160209091012090506001600160a01b03851663e3754f9085308461111160608c018c611b98565b6040518663ffffffff1660e01b8152600401611131959493929190611de8565b600060405180830381600087803b15801561114b57600080fd5b505af115801561115f573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b0382811614156111c45760405162461bcd60e51b815260206004820152601c60248201527f4665654d616e616765723a20636f6d6d697373696f6e20746f6b656e0000000060448201526064016102a6565b6001600160a01b038216611289576000836001600160a01b03168260405160006040518083038185875af1925050503d806000811461121f576040519150601f19603f3d011682016040523d82523d6000602084013e611224565b606091505b50509050806112835760405162461bcd60e51b815260206004820152602560248201527f4665654d616e616765723a206661696c656420746f207769746864726177206e604482015264617469766560d81b60648201526084016102a6565b5061129d565b61129d6001600160a01b0383168483611441565b604080516001600160a01b038086168252841660208201529081018290527f0221f5dbeb176269bc9dbce8b10193c570930431bbe525ae79b4599910500bf49060600160405180910390a1505050565b60008054610100900460ff1615611334578160ff1660011480156113105750303b155b61132c5760405162461bcd60e51b81526004016102a690611ec5565b506000919050565b60005460ff80841691161061135b5760405162461bcd60e51b81526004016102a690611ec5565b506000805460ff191660ff92909216919091179055600190565b919050565b6001600160a01b0381163b6113e75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102a6565b600080516020611f8583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61141f83611493565b60008251118061142c5750805b156106685761143b83836114d3565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526106689084906114ff565b61149c8161137a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606114f88383604051806060016040528060278152602001611fa5602791396115d1565b9392505050565b6000611554826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116ae9092919063ffffffff16565b80519091501561066857808060200190518101906115729190611f13565b6106685760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102a6565b60606001600160a01b0384163b6116395760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016102a6565b600080856001600160a01b0316856040516116549190611f35565b600060405180830381855af49150503d806000811461168f576040519150601f19603f3d011682016040523d82523d6000602084013e611694565b606091505b50915091506116a48282866116c5565b9695505050505050565b60606116bd84846000856116fe565b949350505050565b606083156116d45750816114f8565b8251156116e45782518084602001fd5b8160405162461bcd60e51b81526004016102a69190611f51565b60608247101561175f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102a6565b6001600160a01b0385163b6117b65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102a6565b600080866001600160a01b031685876040516117d29190611f35565b60006040518083038185875af1925050503d806000811461180f576040519150601f19603f3d011682016040523d82523d6000602084013e611814565b606091505b50915091506118248282866116c5565b979650505050505050565b80356001600160a01b038116811461137557600080fd5b60006020828403121561185857600080fd5b6114f88261182f565b60006060828403121561187357600080fd5b50919050565b60006020828403121561188b57600080fd5b813567ffffffffffffffff8111156118a257600080fd5b6116bd84828501611861565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156118ed576118ed6118ae565b604052919050565b600067ffffffffffffffff82111561190f5761190f6118ae565b50601f01601f191660200190565b6000806040838503121561193057600080fd5b6119398361182f565b9150602083013567ffffffffffffffff81111561195557600080fd5b8301601f8101851361196657600080fd5b8035611979611974826118f5565b6118c4565b81815286602083850101111561198e57600080fd5b816020840160208301376000602083830101528093505050509250929050565b6000806000604084860312156119c357600080fd5b6119cc8461182f565b9250602084013567ffffffffffffffff808211156119e957600080fd5b818601915086601f8301126119fd57600080fd5b813581811115611a0c57600080fd5b876020828501011115611a1e57600080fd5b6020830194508093505050509250925092565b600060208284031215611a4357600080fd5b813567ffffffffffffffff811115611a5a57600080fd5b8201608081850312156114f857600080fd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000808335601e19843603018112611b1b57600080fd5b83018035915067ffffffffffffffff821115611b3657600080fd5b6020019150600581901b3603821315611b4e57600080fd5b9250929050565b60208082526023908201527f4665654d616e616765723a20706172616d73206c656e67746873206d69736d616040820152620e8c6d60eb1b606082015260800190565b6000808335601e19843603018112611baf57600080fd5b83018035915067ffffffffffffffff821115611bca57600080fd5b602001915036819003821315611b4e57600080fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415611c1757634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215611c3057600080fd5b5051919050565b60005b83811015611c52578181015183820152602001611c3a565b8381111561143b5750506000910152565b60008060408385031215611c7657600080fd5b825167ffffffffffffffff811115611c8d57600080fd5b8301601f81018513611c9e57600080fd5b8051611cac611974826118f5565b818152866020838501011115611cc157600080fd5b611cd2826020830160208601611c37565b60209590950151949694955050505050565b60008160005b84811015611d19576001600160a01b03611d038361182f565b1686526020958601959190910190600101611cea565b5093949350505050565b60006001600160fb1b03831115611d3957600080fd5b8260051b8083863760009401938452509192915050565b8881526bffffffffffffffffffffffff198860601b16602082015260008751611d80816034850160208c01611c37565b60f888901b6001600160f81b031916603491840191820152611db0611da960358301888a611ce4565b8587611d23565b9b9a5050505050505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60ff8616815260018060a01b0385166020820152836040820152608060608201526000611824608083018486611dbf565b60ff861681526001600160a01b038581166020830152841660408201526080606082018190526000906118249083018486611dbf565b89815260006bffffffffffffffffffffffff19808b60601b166020840152808a60601b166034840152508751611e8c816048850160208c01611c37565b60f888901b6001600160f81b031916604891840191820152611eb5611da960498301888a611ce4565b9c9b505050505050505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215611f2557600080fd5b815180151581146114f857600080fd5b60008251611f47818460208701611c37565b9190910192915050565b6020815260008251806020840152611f70816040850160208701611c37565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122082d2ab92159da1986ddfbc017e08e03f8165da7698c387688bd4ef718f1d536564736f6c63430008090033";

type FeeManagerMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeManagerMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeeManagerMock__factory extends ContractFactory {
  constructor(...args: FeeManagerMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "FeeManagerMock";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FeeManagerMock> {
    return super.deploy(overrides || {}) as Promise<FeeManagerMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FeeManagerMock {
    return super.attach(address) as FeeManagerMock;
  }
  override connect(signer: Signer): FeeManagerMock__factory {
    return super.connect(signer) as FeeManagerMock__factory;
  }
  static readonly contractName: "FeeManagerMock";

  public readonly contractName: "FeeManagerMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeManagerMockInterface {
    return new utils.Interface(_abi) as FeeManagerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeeManagerMock {
    return new Contract(address, _abi, signerOrProvider) as FeeManagerMock;
  }
}
