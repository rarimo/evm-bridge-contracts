/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IFeeManager {
  export type AddFeeTokenParametersStruct = {
    feeTokens: PromiseOrValue<string>[];
    feeAmounts: PromiseOrValue<BigNumberish>[];
    signature: PromiseOrValue<BytesLike>;
  };

  export type AddFeeTokenParametersStructOutput = [
    string[],
    BigNumber[],
    string
  ] & { feeTokens: string[]; feeAmounts: BigNumber[]; signature: string };

  export type RemoveFeeTokenParametersStruct = {
    feeTokens: PromiseOrValue<string>[];
    feeAmounts: PromiseOrValue<BigNumberish>[];
    signature: PromiseOrValue<BytesLike>;
  };

  export type RemoveFeeTokenParametersStructOutput = [
    string[],
    BigNumber[],
    string
  ] & { feeTokens: string[]; feeAmounts: BigNumber[]; signature: string };

  export type UpdateFeeTokenParametersStruct = {
    feeTokens: PromiseOrValue<string>[];
    feeAmounts: PromiseOrValue<BigNumberish>[];
    signature: PromiseOrValue<BytesLike>;
  };

  export type UpdateFeeTokenParametersStructOutput = [
    string[],
    BigNumber[],
    string
  ] & { feeTokens: string[]; feeAmounts: BigNumber[]; signature: string };

  export type WithdrawFeeTokenParametersStruct = {
    receiver: PromiseOrValue<string>;
    feeTokens: PromiseOrValue<string>[];
    amounts: PromiseOrValue<BigNumberish>[];
    signature: PromiseOrValue<BytesLike>;
  };

  export type WithdrawFeeTokenParametersStructOutput = [
    string,
    string[],
    BigNumber[],
    string
  ] & {
    receiver: string;
    feeTokens: string[];
    amounts: BigNumber[];
    signature: string;
  };
}

export declare namespace IBridgeFacade {
  export type DepositFeeERC1155ParametersStruct = {
    feeToken: PromiseOrValue<string>;
  };

  export type DepositFeeERC1155ParametersStructOutput = [string] & {
    feeToken: string;
  };

  export type DepositFeeERC20ParametersStruct = {
    feeToken: PromiseOrValue<string>;
  };

  export type DepositFeeERC20ParametersStructOutput = [string] & {
    feeToken: string;
  };

  export type DepositFeeERC721ParametersStruct = {
    feeToken: PromiseOrValue<string>;
  };

  export type DepositFeeERC721ParametersStructOutput = [string] & {
    feeToken: string;
  };

  export type DepositFeeNativeParametersStruct = {
    feeToken: PromiseOrValue<string>;
  };

  export type DepositFeeNativeParametersStructOutput = [string] & {
    feeToken: string;
  };

  export type DepositFeeSBTParametersStruct = {
    feeToken: PromiseOrValue<string>;
  };

  export type DepositFeeSBTParametersStructOutput = [string] & {
    feeToken: string;
  };
}

export declare namespace IBundler {
  export type BundleStruct = {
    salt: PromiseOrValue<BytesLike>;
    bundle: PromiseOrValue<BytesLike>;
  };

  export type BundleStructOutput = [string, string] & {
    salt: string;
    bundle: string;
  };
}

export declare namespace IERC1155Handler {
  export type DepositERC1155ParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type DepositERC1155ParametersStructOutput = [
    string,
    BigNumber,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    boolean
  ] & {
    token: string;
    tokenId: BigNumber;
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
    isWrapped: boolean;
  };

  export type WithdrawERC1155ParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    tokenURI: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    originHash: PromiseOrValue<BytesLike>;
    receiver: PromiseOrValue<string>;
    proof: PromiseOrValue<BytesLike>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type WithdrawERC1155ParametersStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    string,
    boolean
  ] & {
    token: string;
    tokenId: BigNumber;
    tokenURI: string;
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    originHash: string;
    receiver: string;
    proof: string;
    isWrapped: boolean;
  };
}

export declare namespace IERC20Handler {
  export type DepositERC20ParametersStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type DepositERC20ParametersStructOutput = [
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    boolean
  ] & {
    token: string;
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
    isWrapped: boolean;
  };

  export type WithdrawERC20ParametersStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    originHash: PromiseOrValue<BytesLike>;
    receiver: PromiseOrValue<string>;
    proof: PromiseOrValue<BytesLike>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type WithdrawERC20ParametersStructOutput = [
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    string,
    boolean
  ] & {
    token: string;
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    originHash: string;
    receiver: string;
    proof: string;
    isWrapped: boolean;
  };
}

export declare namespace IERC721Handler {
  export type DepositERC721ParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type DepositERC721ParametersStructOutput = [
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    boolean
  ] & {
    token: string;
    tokenId: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
    isWrapped: boolean;
  };

  export type WithdrawERC721ParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    tokenURI: PromiseOrValue<string>;
    bundle: IBundler.BundleStruct;
    originHash: PromiseOrValue<BytesLike>;
    receiver: PromiseOrValue<string>;
    proof: PromiseOrValue<BytesLike>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type WithdrawERC721ParametersStructOutput = [
    string,
    BigNumber,
    string,
    IBundler.BundleStructOutput,
    string,
    string,
    string,
    boolean
  ] & {
    token: string;
    tokenId: BigNumber;
    tokenURI: string;
    bundle: IBundler.BundleStructOutput;
    originHash: string;
    receiver: string;
    proof: string;
    isWrapped: boolean;
  };
}

export declare namespace INativeHandler {
  export type DepositNativeParametersStruct = {
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
  };

  export type DepositNativeParametersStructOutput = [
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string
  ] & {
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
  };

  export type WithdrawNativeParametersStruct = {
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    originHash: PromiseOrValue<BytesLike>;
    receiver: PromiseOrValue<string>;
    proof: PromiseOrValue<BytesLike>;
  };

  export type WithdrawNativeParametersStructOutput = [
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    string
  ] & {
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    originHash: string;
    receiver: string;
    proof: string;
  };
}

export declare namespace ISBTHandler {
  export type DepositSBTParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
  };

  export type DepositSBTParametersStructOutput = [
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string
  ] & {
    token: string;
    tokenId: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
  };

  export type WithdrawSBTParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    tokenURI: PromiseOrValue<string>;
    bundle: IBundler.BundleStruct;
    originHash: PromiseOrValue<BytesLike>;
    receiver: PromiseOrValue<string>;
    proof: PromiseOrValue<BytesLike>;
  };

  export type WithdrawSBTParametersStructOutput = [
    string,
    BigNumber,
    string,
    IBundler.BundleStructOutput,
    string,
    string,
    string
  ] & {
    token: string;
    tokenId: BigNumber;
    tokenURI: string;
    bundle: IBundler.BundleStructOutput;
    originHash: string;
    receiver: string;
    proof: string;
  };
}

export interface BridgeFacadeInterface extends utils.Interface {
  functions: {
    "__BridgeFacade_init(address)": FunctionFragment;
    "__FeeManager_init(address)": FunctionFragment;
    "addFeeToken((address[],uint256[],bytes))": FunctionFragment;
    "bridge()": FunctionFragment;
    "depositERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))": FunctionFragment;
    "depositERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))": FunctionFragment;
    "depositERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))": FunctionFragment;
    "depositNative((address),(uint256,(bytes32,bytes),string,string))": FunctionFragment;
    "depositSBT((address),(address,uint256,(bytes32,bytes),string,string))": FunctionFragment;
    "getCommission(address)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeFeeToken((address[],uint256[],bytes))": FunctionFragment;
    "updateFeeToken((address[],uint256[],bytes))": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "upgradeToWithSig(address,bytes)": FunctionFragment;
    "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))": FunctionFragment;
    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))": FunctionFragment;
    "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))": FunctionFragment;
    "withdrawFeeToken((address,address[],uint256[],bytes))": FunctionFragment;
    "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))": FunctionFragment;
    "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__BridgeFacade_init"
      | "__BridgeFacade_init(address)"
      | "__FeeManager_init"
      | "__FeeManager_init(address)"
      | "addFeeToken"
      | "addFeeToken((address[],uint256[],bytes))"
      | "bridge"
      | "bridge()"
      | "depositERC1155"
      | "depositERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))"
      | "depositERC20"
      | "depositERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))"
      | "depositERC721"
      | "depositERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))"
      | "depositNative"
      | "depositNative((address),(uint256,(bytes32,bytes),string,string))"
      | "depositSBT"
      | "depositSBT((address),(address,uint256,(bytes32,bytes),string,string))"
      | "getCommission"
      | "getCommission(address)"
      | "proxiableUUID"
      | "proxiableUUID()"
      | "removeFeeToken"
      | "removeFeeToken((address[],uint256[],bytes))"
      | "updateFeeToken"
      | "updateFeeToken((address[],uint256[],bytes))"
      | "upgradeTo"
      | "upgradeTo(address)"
      | "upgradeToAndCall"
      | "upgradeToAndCall(address,bytes)"
      | "upgradeToWithSig"
      | "upgradeToWithSig(address,bytes)"
      | "withdrawERC1155"
      | "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"
      | "withdrawERC20"
      | "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"
      | "withdrawERC721"
      | "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"
      | "withdrawFeeToken"
      | "withdrawFeeToken((address,address[],uint256[],bytes))"
      | "withdrawNative"
      | "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))"
      | "withdrawSBT"
      | "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__BridgeFacade_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "__BridgeFacade_init(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "__FeeManager_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "__FeeManager_init(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addFeeToken",
    values: [IFeeManager.AddFeeTokenParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addFeeToken((address[],uint256[],bytes))",
    values: [IFeeManager.AddFeeTokenParametersStruct]
  ): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(functionFragment: "bridge()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositERC1155",
    values: [
      IBridgeFacade.DepositFeeERC1155ParametersStruct,
      IERC1155Handler.DepositERC1155ParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))",
    values: [
      IBridgeFacade.DepositFeeERC1155ParametersStruct,
      IERC1155Handler.DepositERC1155ParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [
      IBridgeFacade.DepositFeeERC20ParametersStruct,
      IERC20Handler.DepositERC20ParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))",
    values: [
      IBridgeFacade.DepositFeeERC20ParametersStruct,
      IERC20Handler.DepositERC20ParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721",
    values: [
      IBridgeFacade.DepositFeeERC721ParametersStruct,
      IERC721Handler.DepositERC721ParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))",
    values: [
      IBridgeFacade.DepositFeeERC721ParametersStruct,
      IERC721Handler.DepositERC721ParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNative",
    values: [
      IBridgeFacade.DepositFeeNativeParametersStruct,
      INativeHandler.DepositNativeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNative((address),(uint256,(bytes32,bytes),string,string))",
    values: [
      IBridgeFacade.DepositFeeNativeParametersStruct,
      INativeHandler.DepositNativeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSBT",
    values: [
      IBridgeFacade.DepositFeeSBTParametersStruct,
      ISBTHandler.DepositSBTParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSBT((address),(address,uint256,(bytes32,bytes),string,string))",
    values: [
      IBridgeFacade.DepositFeeSBTParametersStruct,
      ISBTHandler.DepositSBTParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommission",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommission(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFeeToken",
    values: [IFeeManager.RemoveFeeTokenParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFeeToken((address[],uint256[],bytes))",
    values: [IFeeManager.RemoveFeeTokenParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeToken",
    values: [IFeeManager.UpdateFeeTokenParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeToken((address[],uint256[],bytes))",
    values: [IFeeManager.UpdateFeeTokenParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToWithSig",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToWithSig(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155",
    values: [IERC1155Handler.WithdrawERC1155ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    values: [IERC1155Handler.WithdrawERC1155ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [IERC20Handler.WithdrawERC20ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    values: [IERC20Handler.WithdrawERC20ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [IERC721Handler.WithdrawERC721ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))",
    values: [IERC721Handler.WithdrawERC721ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeToken",
    values: [IFeeManager.WithdrawFeeTokenParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeToken((address,address[],uint256[],bytes))",
    values: [IFeeManager.WithdrawFeeTokenParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values: [INativeHandler.WithdrawNativeParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))",
    values: [INativeHandler.WithdrawNativeParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSBT",
    values: [ISBTHandler.WithdrawSBTParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))",
    values: [ISBTHandler.WithdrawSBTParametersStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "__BridgeFacade_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__BridgeFacade_init(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__FeeManager_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__FeeManager_init(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFeeToken((address[],uint256[],bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridge()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNative((address),(uint256,(bytes32,bytes),string,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositSBT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositSBT((address),(address,uint256,(bytes32,bytes),string,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommission(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFeeToken((address[],uint256[],bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeToken((address[],uint256[],bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTo(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToWithSig(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeToken((address,address[],uint256[],bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSBT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))",
    data: BytesLike
  ): Result;

  events: {
    "AddedFeeToken(address,uint256)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RemovedFeeToken(address,uint256)": EventFragment;
    "UpdatedFeeToken(address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WithdrawnFeeToken(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedFeeToken"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AddedFeeToken(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AdminChanged(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized(uint8)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFeeToken"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemovedFeeToken(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedFeeToken"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatedFeeToken(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnFeeToken"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawnFeeToken(address,address,uint256)"
  ): EventFragment;
}

export interface AddedFeeTokenEventObject {
  feeToken: string;
  feeAmount: BigNumber;
}
export type AddedFeeTokenEvent = TypedEvent<
  [string, BigNumber],
  AddedFeeTokenEventObject
>;

export type AddedFeeTokenEventFilter = TypedEventFilter<AddedFeeTokenEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RemovedFeeTokenEventObject {
  feeToken: string;
  feeAmount: BigNumber;
}
export type RemovedFeeTokenEvent = TypedEvent<
  [string, BigNumber],
  RemovedFeeTokenEventObject
>;

export type RemovedFeeTokenEventFilter = TypedEventFilter<RemovedFeeTokenEvent>;

export interface UpdatedFeeTokenEventObject {
  feeToken: string;
  feeAmount: BigNumber;
}
export type UpdatedFeeTokenEvent = TypedEvent<
  [string, BigNumber],
  UpdatedFeeTokenEventObject
>;

export type UpdatedFeeTokenEventFilter = TypedEventFilter<UpdatedFeeTokenEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawnFeeTokenEventObject {
  receiver: string;
  feeToken: string;
  amount: BigNumber;
}
export type WithdrawnFeeTokenEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawnFeeTokenEventObject
>;

export type WithdrawnFeeTokenEventFilter =
  TypedEventFilter<WithdrawnFeeTokenEvent>;

export interface BridgeFacade extends BaseContract {
  contractName: "BridgeFacade";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeFacadeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __BridgeFacade_init(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "__BridgeFacade_init(address)"(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __FeeManager_init(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "__FeeManager_init(address)"(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addFeeToken(
      params_: IFeeManager.AddFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addFeeToken((address[],uint256[],bytes))"(
      params_: IFeeManager.AddFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridge(overrides?: CallOverrides): Promise<[string]>;

    "bridge()"(overrides?: CallOverrides): Promise<[string]>;

    depositERC1155(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC20(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC721(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositNative(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositNative((address),(uint256,(bytes32,bytes),string,string))"(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositSBT(
      feeParams_: IBridgeFacade.DepositFeeSBTParametersStruct,
      depositParams_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositSBT((address),(address,uint256,(bytes32,bytes),string,string))"(
      feeParams_: IBridgeFacade.DepositFeeSBTParametersStruct,
      depositParams_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCommission(
      feeToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { commission_: BigNumber }>;

    "getCommission(address)"(
      feeToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { commission_: BigNumber }>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    removeFeeToken(
      params_: IFeeManager.RemoveFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeFeeToken((address[],uint256[],bytes))"(
      params_: IFeeManager.RemoveFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFeeToken(
      params_: IFeeManager.UpdateFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateFeeToken((address[],uint256[],bytes))"(
      params_: IFeeManager.UpdateFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToWithSig(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "upgradeToWithSig(address,bytes)"(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC1155(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFeeToken(
      params_: IFeeManager.WithdrawFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawFeeToken((address,address[],uint256[],bytes))"(
      params_: IFeeManager.WithdrawFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNative(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))"(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawSBT(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __BridgeFacade_init(
    bridge_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "__BridgeFacade_init(address)"(
    bridge_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __FeeManager_init(
    bridge_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "__FeeManager_init(address)"(
    bridge_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addFeeToken(
    params_: IFeeManager.AddFeeTokenParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addFeeToken((address[],uint256[],bytes))"(
    params_: IFeeManager.AddFeeTokenParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridge(overrides?: CallOverrides): Promise<string>;

  "bridge()"(overrides?: CallOverrides): Promise<string>;

  depositERC1155(
    feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
    depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
    feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
    depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC20(
    feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
    depositParams_: IERC20Handler.DepositERC20ParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
    feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
    depositParams_: IERC20Handler.DepositERC20ParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC721(
    feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
    depositParams_: IERC721Handler.DepositERC721ParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
    feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
    depositParams_: IERC721Handler.DepositERC721ParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositNative(
    feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
    depositParams_: INativeHandler.DepositNativeParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositNative((address),(uint256,(bytes32,bytes),string,string))"(
    feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
    depositParams_: INativeHandler.DepositNativeParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositSBT(
    feeParams_: IBridgeFacade.DepositFeeSBTParametersStruct,
    depositParams_: ISBTHandler.DepositSBTParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositSBT((address),(address,uint256,(bytes32,bytes),string,string))"(
    feeParams_: IBridgeFacade.DepositFeeSBTParametersStruct,
    depositParams_: ISBTHandler.DepositSBTParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCommission(
    feeToken_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCommission(address)"(
    feeToken_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  removeFeeToken(
    params_: IFeeManager.RemoveFeeTokenParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeFeeToken((address[],uint256[],bytes))"(
    params_: IFeeManager.RemoveFeeTokenParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFeeToken(
    params_: IFeeManager.UpdateFeeTokenParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateFeeToken((address[],uint256[],bytes))"(
    params_: IFeeManager.UpdateFeeTokenParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToWithSig(
    newImplementation_: PromiseOrValue<string>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "upgradeToWithSig(address,bytes)"(
    newImplementation_: PromiseOrValue<string>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC1155(
    params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
    params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    params_: IERC20Handler.WithdrawERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
    params_: IERC20Handler.WithdrawERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    params_: IERC721Handler.WithdrawERC721ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
    params_: IERC721Handler.WithdrawERC721ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFeeToken(
    params_: IFeeManager.WithdrawFeeTokenParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawFeeToken((address,address[],uint256[],bytes))"(
    params_: IFeeManager.WithdrawFeeTokenParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNative(
    params_: INativeHandler.WithdrawNativeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))"(
    params_: INativeHandler.WithdrawNativeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawSBT(
    params_: ISBTHandler.WithdrawSBTParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
    params_: ISBTHandler.WithdrawSBTParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __BridgeFacade_init(
      bridge_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "__BridgeFacade_init(address)"(
      bridge_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    __FeeManager_init(
      bridge_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "__FeeManager_init(address)"(
      bridge_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addFeeToken(
      params_: IFeeManager.AddFeeTokenParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "addFeeToken((address[],uint256[],bytes))"(
      params_: IFeeManager.AddFeeTokenParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    bridge(overrides?: CallOverrides): Promise<string>;

    "bridge()"(overrides?: CallOverrides): Promise<string>;

    depositERC1155(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC20(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC721(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNative(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositNative((address),(uint256,(bytes32,bytes),string,string))"(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositSBT(
      feeParams_: IBridgeFacade.DepositFeeSBTParametersStruct,
      depositParams_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositSBT((address),(address,uint256,(bytes32,bytes),string,string))"(
      feeParams_: IBridgeFacade.DepositFeeSBTParametersStruct,
      depositParams_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getCommission(
      feeToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCommission(address)"(
      feeToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    removeFeeToken(
      params_: IFeeManager.RemoveFeeTokenParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeFeeToken((address[],uint256[],bytes))"(
      params_: IFeeManager.RemoveFeeTokenParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeToken(
      params_: IFeeManager.UpdateFeeTokenParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateFeeToken((address[],uint256[],bytes))"(
      params_: IFeeManager.UpdateFeeTokenParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToWithSig(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToWithSig(address,bytes)"(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC1155(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFeeToken(
      params_: IFeeManager.WithdrawFeeTokenParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFeeToken((address,address[],uint256[],bytes))"(
      params_: IFeeManager.WithdrawFeeTokenParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNative(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))"(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSBT(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedFeeToken(address,uint256)"(
      feeToken?: null,
      feeAmount?: null
    ): AddedFeeTokenEventFilter;
    AddedFeeToken(feeToken?: null, feeAmount?: null): AddedFeeTokenEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RemovedFeeToken(address,uint256)"(
      feeToken?: null,
      feeAmount?: null
    ): RemovedFeeTokenEventFilter;
    RemovedFeeToken(
      feeToken?: null,
      feeAmount?: null
    ): RemovedFeeTokenEventFilter;

    "UpdatedFeeToken(address,uint256)"(
      feeToken?: null,
      feeAmount?: null
    ): UpdatedFeeTokenEventFilter;
    UpdatedFeeToken(
      feeToken?: null,
      feeAmount?: null
    ): UpdatedFeeTokenEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "WithdrawnFeeToken(address,address,uint256)"(
      receiver?: null,
      feeToken?: null,
      amount?: null
    ): WithdrawnFeeTokenEventFilter;
    WithdrawnFeeToken(
      receiver?: null,
      feeToken?: null,
      amount?: null
    ): WithdrawnFeeTokenEventFilter;
  };

  estimateGas: {
    __BridgeFacade_init(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "__BridgeFacade_init(address)"(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __FeeManager_init(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "__FeeManager_init(address)"(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addFeeToken(
      params_: IFeeManager.AddFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addFeeToken((address[],uint256[],bytes))"(
      params_: IFeeManager.AddFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    "bridge()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositERC1155(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC20(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC721(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositNative(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositNative((address),(uint256,(bytes32,bytes),string,string))"(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositSBT(
      feeParams_: IBridgeFacade.DepositFeeSBTParametersStruct,
      depositParams_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositSBT((address),(address,uint256,(bytes32,bytes),string,string))"(
      feeParams_: IBridgeFacade.DepositFeeSBTParametersStruct,
      depositParams_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCommission(
      feeToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCommission(address)"(
      feeToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFeeToken(
      params_: IFeeManager.RemoveFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeFeeToken((address[],uint256[],bytes))"(
      params_: IFeeManager.RemoveFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFeeToken(
      params_: IFeeManager.UpdateFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateFeeToken((address[],uint256[],bytes))"(
      params_: IFeeManager.UpdateFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToWithSig(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "upgradeToWithSig(address,bytes)"(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC1155(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFeeToken(
      params_: IFeeManager.WithdrawFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawFeeToken((address,address[],uint256[],bytes))"(
      params_: IFeeManager.WithdrawFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNative(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))"(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawSBT(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __BridgeFacade_init(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "__BridgeFacade_init(address)"(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __FeeManager_init(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "__FeeManager_init(address)"(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addFeeToken(
      params_: IFeeManager.AddFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addFeeToken((address[],uint256[],bytes))"(
      params_: IFeeManager.AddFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bridge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositERC1155(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC20(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC721(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositNative(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositNative((address),(uint256,(bytes32,bytes),string,string))"(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositSBT(
      feeParams_: IBridgeFacade.DepositFeeSBTParametersStruct,
      depositParams_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositSBT((address),(address,uint256,(bytes32,bytes),string,string))"(
      feeParams_: IBridgeFacade.DepositFeeSBTParametersStruct,
      depositParams_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCommission(
      feeToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCommission(address)"(
      feeToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFeeToken(
      params_: IFeeManager.RemoveFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeFeeToken((address[],uint256[],bytes))"(
      params_: IFeeManager.RemoveFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeToken(
      params_: IFeeManager.UpdateFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateFeeToken((address[],uint256[],bytes))"(
      params_: IFeeManager.UpdateFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToWithSig(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToWithSig(address,bytes)"(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC1155(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFeeToken(
      params_: IFeeManager.WithdrawFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFeeToken((address,address[],uint256[],bytes))"(
      params_: IFeeManager.WithdrawFeeTokenParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNative(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))"(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSBT(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
