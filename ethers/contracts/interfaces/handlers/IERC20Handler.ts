/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IBundler {
  export type BundleStruct = {
    salt: PromiseOrValue<BytesLike>;
    bundle: PromiseOrValue<BytesLike>;
  };

  export type BundleStructOutput = [string, string] & {
    salt: string;
    bundle: string;
  };
}

export declare namespace IERC20Handler {
  export type DepositERC20ParametersStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type DepositERC20ParametersStructOutput = [
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    boolean
  ] & {
    token: string;
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
    isWrapped: boolean;
  };

  export type WithdrawERC20ParametersStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    originHash: PromiseOrValue<BytesLike>;
    receiver: PromiseOrValue<string>;
    proof: PromiseOrValue<BytesLike>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type WithdrawERC20ParametersStructOutput = [
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    string,
    boolean
  ] & {
    token: string;
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    originHash: string;
    receiver: string;
    proof: string;
    isWrapped: boolean;
  };
}

export interface IERC20HandlerInterface extends utils.Interface {
  functions: {
    "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))": FunctionFragment;
    "determineProxyAddress(bytes32)": FunctionFragment;
    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))": FunctionFragment;
    "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositERC20"
      | "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))"
      | "determineProxyAddress"
      | "determineProxyAddress(bytes32)"
      | "withdrawERC20"
      | "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"
      | "withdrawERC20Bundle"
      | "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [IERC20Handler.DepositERC20ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))",
    values: [IERC20Handler.DepositERC20ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "determineProxyAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "determineProxyAddress(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [IERC20Handler.WithdrawERC20ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    values: [IERC20Handler.WithdrawERC20ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20Bundle",
    values: [IERC20Handler.WithdrawERC20ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    values: [IERC20Handler.WithdrawERC20ParametersStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "determineProxyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "determineProxyAddress(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20Bundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    data: BytesLike
  ): Result;

  events: {
    "DepositedERC20(address,uint256,bytes32,bytes,string,string,bool)": EventFragment;
    "WithdrawnERC20(address,uint256,bytes32,bytes,bytes32,address,bytes,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositedERC20"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DepositedERC20(address,uint256,bytes32,bytes,string,string,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnERC20"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawnERC20(address,uint256,bytes32,bytes,bytes32,address,bytes,bool)"
  ): EventFragment;
}

export interface DepositedERC20EventObject {
  token: string;
  amount: BigNumber;
  salt: string;
  bundle: string;
  network: string;
  receiver: string;
  isWrapped: boolean;
}
export type DepositedERC20Event = TypedEvent<
  [string, BigNumber, string, string, string, string, boolean],
  DepositedERC20EventObject
>;

export type DepositedERC20EventFilter = TypedEventFilter<DepositedERC20Event>;

export interface WithdrawnERC20EventObject {
  token: string;
  amount: BigNumber;
  salt: string;
  bundle: string;
  originHash: string;
  receiver: string;
  proof: string;
  isWrapped: boolean;
}
export type WithdrawnERC20Event = TypedEvent<
  [string, BigNumber, string, string, string, string, string, boolean],
  WithdrawnERC20EventObject
>;

export type WithdrawnERC20EventFilter = TypedEventFilter<WithdrawnERC20Event>;

export interface IERC20Handler extends BaseContract {
  contractName: "IERC20Handler";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC20HandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositERC20(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    determineProxyAddress(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "determineProxyAddress(bytes32)"(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawERC20(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20Bundle(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  depositERC20(
    params_: IERC20Handler.DepositERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))"(
    params_: IERC20Handler.DepositERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  determineProxyAddress(
    salt_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "determineProxyAddress(bytes32)"(
    salt_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawERC20(
    params_: IERC20Handler.WithdrawERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
    params_: IERC20Handler.WithdrawERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20Bundle(
    params_: IERC20Handler.WithdrawERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
    params_: IERC20Handler.WithdrawERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositERC20(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    determineProxyAddress(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "determineProxyAddress(bytes32)"(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawERC20(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20Bundle(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DepositedERC20(address,uint256,bytes32,bytes,string,string,bool)"(
      token?: null,
      amount?: null,
      salt?: null,
      bundle?: null,
      network?: null,
      receiver?: null,
      isWrapped?: null
    ): DepositedERC20EventFilter;
    DepositedERC20(
      token?: null,
      amount?: null,
      salt?: null,
      bundle?: null,
      network?: null,
      receiver?: null,
      isWrapped?: null
    ): DepositedERC20EventFilter;

    "WithdrawnERC20(address,uint256,bytes32,bytes,bytes32,address,bytes,bool)"(
      token?: null,
      amount?: null,
      salt?: null,
      bundle?: null,
      originHash?: null,
      receiver?: null,
      proof?: null,
      isWrapped?: null
    ): WithdrawnERC20EventFilter;
    WithdrawnERC20(
      token?: null,
      amount?: null,
      salt?: null,
      bundle?: null,
      originHash?: null,
      receiver?: null,
      proof?: null,
      isWrapped?: null
    ): WithdrawnERC20EventFilter;
  };

  estimateGas: {
    depositERC20(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    determineProxyAddress(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "determineProxyAddress(bytes32)"(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawERC20(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20Bundle(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositERC20(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    determineProxyAddress(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "determineProxyAddress(bytes32)"(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20Bundle(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
