/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IBundler {
  export type BundleStruct = {
    salt: PromiseOrValue<BytesLike>;
    bundle: PromiseOrValue<BytesLike>;
  };

  export type BundleStructOutput = [string, string] & {
    salt: string;
    bundle: string;
  };
}

export declare namespace IERC1155Handler {
  export type DepositERC1155ParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type DepositERC1155ParametersStructOutput = [
    string,
    BigNumber,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    boolean
  ] & {
    token: string;
    tokenId: BigNumber;
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
    isWrapped: boolean;
  };

  export type WithdrawERC1155ParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    tokenURI: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    originHash: PromiseOrValue<BytesLike>;
    receiver: PromiseOrValue<string>;
    proof: PromiseOrValue<BytesLike>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type WithdrawERC1155ParametersStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    string,
    boolean
  ] & {
    token: string;
    tokenId: BigNumber;
    tokenURI: string;
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    originHash: string;
    receiver: string;
    proof: string;
    isWrapped: boolean;
  };
}

export declare namespace IERC20Handler {
  export type DepositERC20ParametersStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type DepositERC20ParametersStructOutput = [
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    boolean
  ] & {
    token: string;
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
    isWrapped: boolean;
  };

  export type WithdrawERC20ParametersStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    originHash: PromiseOrValue<BytesLike>;
    receiver: PromiseOrValue<string>;
    proof: PromiseOrValue<BytesLike>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type WithdrawERC20ParametersStructOutput = [
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    string,
    boolean
  ] & {
    token: string;
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    originHash: string;
    receiver: string;
    proof: string;
    isWrapped: boolean;
  };
}

export declare namespace IERC721Handler {
  export type DepositERC721ParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type DepositERC721ParametersStructOutput = [
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    boolean
  ] & {
    token: string;
    tokenId: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
    isWrapped: boolean;
  };

  export type WithdrawERC721ParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    tokenURI: PromiseOrValue<string>;
    bundle: IBundler.BundleStruct;
    originHash: PromiseOrValue<BytesLike>;
    receiver: PromiseOrValue<string>;
    proof: PromiseOrValue<BytesLike>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type WithdrawERC721ParametersStructOutput = [
    string,
    BigNumber,
    string,
    IBundler.BundleStructOutput,
    string,
    string,
    string,
    boolean
  ] & {
    token: string;
    tokenId: BigNumber;
    tokenURI: string;
    bundle: IBundler.BundleStructOutput;
    originHash: string;
    receiver: string;
    proof: string;
    isWrapped: boolean;
  };
}

export declare namespace INativeHandler {
  export type DepositNativeParametersStruct = {
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
  };

  export type DepositNativeParametersStructOutput = [
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string
  ] & {
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
  };

  export type WithdrawNativeParametersStruct = {
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    originHash: PromiseOrValue<BytesLike>;
    receiver: PromiseOrValue<string>;
    proof: PromiseOrValue<BytesLike>;
  };

  export type WithdrawNativeParametersStructOutput = [
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    string
  ] & {
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    originHash: string;
    receiver: string;
    proof: string;
  };
}

export declare namespace ISBTHandler {
  export type DepositSBTParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
  };

  export type DepositSBTParametersStructOutput = [
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string
  ] & {
    token: string;
    tokenId: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
  };

  export type WithdrawSBTParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    tokenURI: PromiseOrValue<string>;
    bundle: IBundler.BundleStruct;
    originHash: PromiseOrValue<BytesLike>;
    receiver: PromiseOrValue<string>;
    proof: PromiseOrValue<BytesLike>;
  };

  export type WithdrawSBTParametersStructOutput = [
    string,
    BigNumber,
    string,
    IBundler.BundleStructOutput,
    string,
    string,
    string
  ] & {
    token: string;
    tokenId: BigNumber;
    tokenURI: string;
    bundle: IBundler.BundleStructOutput;
    originHash: string;
    receiver: string;
    proof: string;
  };
}

export interface BridgeInterface extends utils.Interface {
  functions: {
    "P()": FunctionFragment;
    "__Bridge_init(address,address,string,address)": FunctionFragment;
    "__Bundler_init(address)": FunctionFragment;
    "__Signers_init(address,address,string)": FunctionFragment;
    "bundleExecutorImplementation()": FunctionFragment;
    "chainName()": FunctionFragment;
    "changeBundleExecutorImplementation(address,bytes)": FunctionFragment;
    "changeFacade(address,bytes)": FunctionFragment;
    "changeSigner(bytes,bytes)": FunctionFragment;
    "checkSignatureAndIncrementNonce(uint8,address,bytes32,bytes)": FunctionFragment;
    "depositERC1155((address,uint256,uint256,(bytes32,bytes),string,string,bool))": FunctionFragment;
    "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))": FunctionFragment;
    "depositERC721((address,uint256,(bytes32,bytes),string,string,bool))": FunctionFragment;
    "depositNative((uint256,(bytes32,bytes),string,string))": FunctionFragment;
    "depositSBT((address,uint256,(bytes32,bytes),string,string))": FunctionFragment;
    "determineProxyAddress(bytes32)": FunctionFragment;
    "facade()": FunctionFragment;
    "getSigComponents(uint8,address)": FunctionFragment;
    "nonces(address,uint8)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "signer()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "upgradeToWithSig(address,bytes)": FunctionFragment;
    "usedHashes(bytes32)": FunctionFragment;
    "validateChangeAddressSignature(uint8,address,address,bytes)": FunctionFragment;
    "verifyMerkleLeaf(bytes,(bytes32,bytes),bytes32,address,bytes)": FunctionFragment;
    "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))": FunctionFragment;
    "withdrawERC1155Bundle((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))": FunctionFragment;
    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))": FunctionFragment;
    "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))": FunctionFragment;
    "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))": FunctionFragment;
    "withdrawERC721Bundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))": FunctionFragment;
    "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))": FunctionFragment;
    "withdrawNativeBundle((uint256,(bytes32,bytes),bytes32,address,bytes))": FunctionFragment;
    "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))": FunctionFragment;
    "withdrawSBTBundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "P"
      | "P()"
      | "__Bridge_init"
      | "__Bridge_init(address,address,string,address)"
      | "__Bundler_init"
      | "__Bundler_init(address)"
      | "__Signers_init"
      | "__Signers_init(address,address,string)"
      | "bundleExecutorImplementation"
      | "bundleExecutorImplementation()"
      | "chainName"
      | "chainName()"
      | "changeBundleExecutorImplementation"
      | "changeBundleExecutorImplementation(address,bytes)"
      | "changeFacade"
      | "changeFacade(address,bytes)"
      | "changeSigner"
      | "changeSigner(bytes,bytes)"
      | "checkSignatureAndIncrementNonce"
      | "checkSignatureAndIncrementNonce(uint8,address,bytes32,bytes)"
      | "depositERC1155"
      | "depositERC1155((address,uint256,uint256,(bytes32,bytes),string,string,bool))"
      | "depositERC20"
      | "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))"
      | "depositERC721"
      | "depositERC721((address,uint256,(bytes32,bytes),string,string,bool))"
      | "depositNative"
      | "depositNative((uint256,(bytes32,bytes),string,string))"
      | "depositSBT"
      | "depositSBT((address,uint256,(bytes32,bytes),string,string))"
      | "determineProxyAddress"
      | "determineProxyAddress(bytes32)"
      | "facade"
      | "facade()"
      | "getSigComponents"
      | "getSigComponents(uint8,address)"
      | "nonces"
      | "nonces(address,uint8)"
      | "onERC1155BatchReceived"
      | "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
      | "onERC1155Received"
      | "onERC1155Received(address,address,uint256,uint256,bytes)"
      | "onERC721Received"
      | "onERC721Received(address,address,uint256,bytes)"
      | "proxiableUUID"
      | "proxiableUUID()"
      | "signer"
      | "signer()"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "upgradeTo"
      | "upgradeTo(address)"
      | "upgradeToAndCall"
      | "upgradeToAndCall(address,bytes)"
      | "upgradeToWithSig"
      | "upgradeToWithSig(address,bytes)"
      | "usedHashes"
      | "usedHashes(bytes32)"
      | "validateChangeAddressSignature"
      | "validateChangeAddressSignature(uint8,address,address,bytes)"
      | "verifyMerkleLeaf"
      | "verifyMerkleLeaf(bytes,(bytes32,bytes),bytes32,address,bytes)"
      | "withdrawERC1155"
      | "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"
      | "withdrawERC1155Bundle"
      | "withdrawERC1155Bundle((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"
      | "withdrawERC20"
      | "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"
      | "withdrawERC20Bundle"
      | "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"
      | "withdrawERC721"
      | "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"
      | "withdrawERC721Bundle"
      | "withdrawERC721Bundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"
      | "withdrawNative"
      | "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))"
      | "withdrawNativeBundle"
      | "withdrawNativeBundle((uint256,(bytes32,bytes),bytes32,address,bytes))"
      | "withdrawSBT"
      | "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"
      | "withdrawSBTBundle"
      | "withdrawSBTBundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "P", values?: undefined): string;
  encodeFunctionData(functionFragment: "P()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__Bridge_init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "__Bridge_init(address,address,string,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "__Bundler_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "__Bundler_init(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "__Signers_init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "__Signers_init(address,address,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bundleExecutorImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bundleExecutorImplementation()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "chainName()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeBundleExecutorImplementation",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeBundleExecutorImplementation(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFacade",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFacade(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSigner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSigner(bytes,bytes)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignatureAndIncrementNonce",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignatureAndIncrementNonce(uint8,address,bytes32,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC1155",
    values: [IERC1155Handler.DepositERC1155ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC1155((address,uint256,uint256,(bytes32,bytes),string,string,bool))",
    values: [IERC1155Handler.DepositERC1155ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [IERC20Handler.DepositERC20ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))",
    values: [IERC20Handler.DepositERC20ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721",
    values: [IERC721Handler.DepositERC721ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721((address,uint256,(bytes32,bytes),string,string,bool))",
    values: [IERC721Handler.DepositERC721ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNative",
    values: [INativeHandler.DepositNativeParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNative((uint256,(bytes32,bytes),string,string))",
    values: [INativeHandler.DepositNativeParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSBT",
    values: [ISBTHandler.DepositSBTParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSBT((address,uint256,(bytes32,bytes),string,string))",
    values: [ISBTHandler.DepositSBTParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "determineProxyAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "determineProxyAddress(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "facade", values?: undefined): string;
  encodeFunctionData(functionFragment: "facade()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSigComponents",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigComponents(uint8,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces(address,uint8)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received(address,address,uint256,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(functionFragment: "signer()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToWithSig",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToWithSig(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "usedHashes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "usedHashes(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateChangeAddressSignature",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateChangeAddressSignature(uint8,address,address,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMerkleLeaf",
    values: [
      PromiseOrValue<BytesLike>,
      IBundler.BundleStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMerkleLeaf(bytes,(bytes32,bytes),bytes32,address,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      IBundler.BundleStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155",
    values: [IERC1155Handler.WithdrawERC1155ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    values: [IERC1155Handler.WithdrawERC1155ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155Bundle",
    values: [IERC1155Handler.WithdrawERC1155ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155Bundle((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    values: [IERC1155Handler.WithdrawERC1155ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [IERC20Handler.WithdrawERC20ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    values: [IERC20Handler.WithdrawERC20ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20Bundle",
    values: [IERC20Handler.WithdrawERC20ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    values: [IERC20Handler.WithdrawERC20ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [IERC721Handler.WithdrawERC721ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))",
    values: [IERC721Handler.WithdrawERC721ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721Bundle",
    values: [IERC721Handler.WithdrawERC721ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721Bundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))",
    values: [IERC721Handler.WithdrawERC721ParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values: [INativeHandler.WithdrawNativeParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))",
    values: [INativeHandler.WithdrawNativeParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNativeBundle",
    values: [INativeHandler.WithdrawNativeParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNativeBundle((uint256,(bytes32,bytes),bytes32,address,bytes))",
    values: [INativeHandler.WithdrawNativeParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSBT",
    values: [ISBTHandler.WithdrawSBTParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))",
    values: [ISBTHandler.WithdrawSBTParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSBTBundle",
    values: [ISBTHandler.WithdrawSBTParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSBTBundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))",
    values: [ISBTHandler.WithdrawSBTParametersStruct]
  ): string;

  decodeFunctionResult(functionFragment: "P", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "P()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__Bridge_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Bridge_init(address,address,string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Bundler_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Bundler_init(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Signers_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Signers_init(address,address,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bundleExecutorImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bundleExecutorImplementation()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainName()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBundleExecutorImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBundleExecutorImplementation(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFacade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFacade(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSigner(bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatureAndIncrementNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatureAndIncrementNonce(uint8,address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC1155((address,uint256,uint256,(bytes32,bytes),string,string,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721((address,uint256,(bytes32,bytes),string,string,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNative((uint256,(bytes32,bytes),string,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositSBT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositSBT((address,uint256,(bytes32,bytes),string,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "determineProxyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "determineProxyAddress(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "facade()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSigComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSigComponents(uint8,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(address,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received(address,address,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signer()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTo(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToWithSig(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usedHashes(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateChangeAddressSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateChangeAddressSignature(uint8,address,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMerkleLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMerkleLeaf(bytes,(bytes32,bytes),bytes32,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155Bundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155Bundle((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20Bundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721Bundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721Bundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNativeBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNativeBundle((uint256,(bytes32,bytes),bytes32,address,bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSBT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSBTBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSBTBundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "DepositedERC1155(address,uint256,uint256,bytes32,bytes,string,string,bool)": EventFragment;
    "DepositedERC20(address,uint256,bytes32,bytes,string,string,bool)": EventFragment;
    "DepositedERC721(address,uint256,bytes32,bytes,string,string,bool)": EventFragment;
    "DepositedNative(uint256,bytes32,bytes,string,string)": EventFragment;
    "DepositedSBT(address,uint256,bytes32,bytes,string,string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WithdrawnERC1155(address,uint256,string,uint256,bytes32,bytes,bytes32,address,bytes,bool)": EventFragment;
    "WithdrawnERC20(address,uint256,bytes32,bytes,bytes32,address,bytes,bool)": EventFragment;
    "WithdrawnERC721(address,uint256,string,bytes32,bytes,bytes32,address,bytes,bool)": EventFragment;
    "WithdrawnNative(uint256,bytes32,bytes,bytes32,address,bytes)": EventFragment;
    "WithdrawnSBT(address,uint256,string,bytes32,bytes,bytes32,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AdminChanged(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositedERC1155"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DepositedERC1155(address,uint256,uint256,bytes32,bytes,string,string,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositedERC20"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DepositedERC20(address,uint256,bytes32,bytes,string,string,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositedERC721"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DepositedERC721(address,uint256,bytes32,bytes,string,string,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositedNative"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DepositedNative(uint256,bytes32,bytes,string,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositedSBT"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DepositedSBT(address,uint256,bytes32,bytes,string,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized(uint8)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnERC1155"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawnERC1155(address,uint256,string,uint256,bytes32,bytes,bytes32,address,bytes,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnERC20"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawnERC20(address,uint256,bytes32,bytes,bytes32,address,bytes,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnERC721"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawnERC721(address,uint256,string,bytes32,bytes,bytes32,address,bytes,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnNative"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawnNative(uint256,bytes32,bytes,bytes32,address,bytes)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnSBT"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawnSBT(address,uint256,string,bytes32,bytes,bytes32,address,bytes)"
  ): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DepositedERC1155EventObject {
  token: string;
  tokenId: BigNumber;
  amount: BigNumber;
  salt: string;
  bundle: string;
  network: string;
  receiver: string;
  isWrapped: boolean;
}
export type DepositedERC1155Event = TypedEvent<
  [string, BigNumber, BigNumber, string, string, string, string, boolean],
  DepositedERC1155EventObject
>;

export type DepositedERC1155EventFilter =
  TypedEventFilter<DepositedERC1155Event>;

export interface DepositedERC20EventObject {
  token: string;
  amount: BigNumber;
  salt: string;
  bundle: string;
  network: string;
  receiver: string;
  isWrapped: boolean;
}
export type DepositedERC20Event = TypedEvent<
  [string, BigNumber, string, string, string, string, boolean],
  DepositedERC20EventObject
>;

export type DepositedERC20EventFilter = TypedEventFilter<DepositedERC20Event>;

export interface DepositedERC721EventObject {
  token: string;
  tokenId: BigNumber;
  salt: string;
  bundle: string;
  network: string;
  receiver: string;
  isWrapped: boolean;
}
export type DepositedERC721Event = TypedEvent<
  [string, BigNumber, string, string, string, string, boolean],
  DepositedERC721EventObject
>;

export type DepositedERC721EventFilter = TypedEventFilter<DepositedERC721Event>;

export interface DepositedNativeEventObject {
  amount: BigNumber;
  salt: string;
  bundle: string;
  network: string;
  receiver: string;
}
export type DepositedNativeEvent = TypedEvent<
  [BigNumber, string, string, string, string],
  DepositedNativeEventObject
>;

export type DepositedNativeEventFilter = TypedEventFilter<DepositedNativeEvent>;

export interface DepositedSBTEventObject {
  token: string;
  tokenId: BigNumber;
  salt: string;
  bundle: string;
  network: string;
  receiver: string;
}
export type DepositedSBTEvent = TypedEvent<
  [string, BigNumber, string, string, string, string],
  DepositedSBTEventObject
>;

export type DepositedSBTEventFilter = TypedEventFilter<DepositedSBTEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawnERC1155EventObject {
  token: string;
  tokenId: BigNumber;
  tokenURI: string;
  amount: BigNumber;
  salt: string;
  bundle: string;
  originHash: string;
  receiver: string;
  proof: string;
  isWrapped: boolean;
}
export type WithdrawnERC1155Event = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    boolean
  ],
  WithdrawnERC1155EventObject
>;

export type WithdrawnERC1155EventFilter =
  TypedEventFilter<WithdrawnERC1155Event>;

export interface WithdrawnERC20EventObject {
  token: string;
  amount: BigNumber;
  salt: string;
  bundle: string;
  originHash: string;
  receiver: string;
  proof: string;
  isWrapped: boolean;
}
export type WithdrawnERC20Event = TypedEvent<
  [string, BigNumber, string, string, string, string, string, boolean],
  WithdrawnERC20EventObject
>;

export type WithdrawnERC20EventFilter = TypedEventFilter<WithdrawnERC20Event>;

export interface WithdrawnERC721EventObject {
  token: string;
  tokenId: BigNumber;
  tokenURI: string;
  salt: string;
  bundle: string;
  originHash: string;
  receiver: string;
  proof: string;
  isWrapped: boolean;
}
export type WithdrawnERC721Event = TypedEvent<
  [string, BigNumber, string, string, string, string, string, string, boolean],
  WithdrawnERC721EventObject
>;

export type WithdrawnERC721EventFilter = TypedEventFilter<WithdrawnERC721Event>;

export interface WithdrawnNativeEventObject {
  amount: BigNumber;
  salt: string;
  bundle: string;
  originHash: string;
  receiver: string;
  proof: string;
}
export type WithdrawnNativeEvent = TypedEvent<
  [BigNumber, string, string, string, string, string],
  WithdrawnNativeEventObject
>;

export type WithdrawnNativeEventFilter = TypedEventFilter<WithdrawnNativeEvent>;

export interface WithdrawnSBTEventObject {
  token: string;
  tokenId: BigNumber;
  tokenURI: string;
  salt: string;
  bundle: string;
  originHash: string;
  receiver: string;
  proof: string;
}
export type WithdrawnSBTEvent = TypedEvent<
  [string, BigNumber, string, string, string, string, string, string],
  WithdrawnSBTEventObject
>;

export type WithdrawnSBTEventFilter = TypedEventFilter<WithdrawnSBTEvent>;

export interface Bridge extends BaseContract {
  contractName: "Bridge";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    P(overrides?: CallOverrides): Promise<[BigNumber]>;

    "P()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    __Bridge_init(
      signer_: PromiseOrValue<string>,
      bundleImplementation_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "__Bridge_init(address,address,string,address)"(
      signer_: PromiseOrValue<string>,
      bundleImplementation_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __Bundler_init(
      bundleExecutorImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "__Bundler_init(address)"(
      bundleExecutorImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __Signers_init(
      signer_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "__Signers_init(address,address,string)"(
      signer_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bundleExecutorImplementation(overrides?: CallOverrides): Promise<[string]>;

    "bundleExecutorImplementation()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    chainName(overrides?: CallOverrides): Promise<[string]>;

    "chainName()"(overrides?: CallOverrides): Promise<[string]>;

    changeBundleExecutorImplementation(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "changeBundleExecutorImplementation(address,bytes)"(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeFacade(
      newFacade_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "changeFacade(address,bytes)"(
      newFacade_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeSigner(
      newSignerPubKey_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "changeSigner(bytes,bytes)"(
      newSignerPubKey_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkSignatureAndIncrementNonce(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      signHash_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "checkSignatureAndIncrementNonce(uint8,address,bytes32,bytes)"(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      signHash_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC1155(
      params_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositERC1155((address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC20(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC721(
      params_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositERC721((address,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositNative(
      params_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositNative((uint256,(bytes32,bytes),string,string))"(
      params_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositSBT(
      params_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositSBT((address,uint256,(bytes32,bytes),string,string))"(
      params_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    determineProxyAddress(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "determineProxyAddress(bytes32)"(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    facade(overrides?: CallOverrides): Promise<[string]>;

    "facade()"(overrides?: CallOverrides): Promise<[string]>;

    getSigComponents(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { chainName_: string; nonce_: BigNumber }>;

    "getSigComponents(uint8,address)"(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { chainName_: string; nonce_: BigNumber }>;

    nonces(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nonces(address,uint8)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    "signer()"(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToWithSig(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "upgradeToWithSig(address,bytes)"(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usedHashes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "usedHashes(bytes32)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validateChangeAddressSignature(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      newAddress_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "validateChangeAddressSignature(uint8,address,address,bytes)"(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      newAddress_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyMerkleLeaf(
      tokenDataLeaf_: PromiseOrValue<BytesLike>,
      bundle_: IBundler.BundleStruct,
      originHash_: PromiseOrValue<BytesLike>,
      receiver_: PromiseOrValue<string>,
      proof_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "verifyMerkleLeaf(bytes,(bytes32,bytes),bytes32,address,bytes)"(
      tokenDataLeaf_: PromiseOrValue<BytesLike>,
      bundle_: IBundler.BundleStruct,
      originHash_: PromiseOrValue<BytesLike>,
      receiver_: PromiseOrValue<string>,
      proof_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC1155(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC1155Bundle(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawERC1155Bundle((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20Bundle(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721Bundle(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawERC721Bundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNative(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))"(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNativeBundle(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawNativeBundle((uint256,(bytes32,bytes),bytes32,address,bytes))"(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawSBT(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawSBTBundle(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawSBTBundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  P(overrides?: CallOverrides): Promise<BigNumber>;

  "P()"(overrides?: CallOverrides): Promise<BigNumber>;

  __Bridge_init(
    signer_: PromiseOrValue<string>,
    bundleImplementation_: PromiseOrValue<string>,
    chainName_: PromiseOrValue<string>,
    facade_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "__Bridge_init(address,address,string,address)"(
    signer_: PromiseOrValue<string>,
    bundleImplementation_: PromiseOrValue<string>,
    chainName_: PromiseOrValue<string>,
    facade_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __Bundler_init(
    bundleExecutorImplementation_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "__Bundler_init(address)"(
    bundleExecutorImplementation_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __Signers_init(
    signer_: PromiseOrValue<string>,
    facade_: PromiseOrValue<string>,
    chainName_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "__Signers_init(address,address,string)"(
    signer_: PromiseOrValue<string>,
    facade_: PromiseOrValue<string>,
    chainName_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bundleExecutorImplementation(overrides?: CallOverrides): Promise<string>;

  "bundleExecutorImplementation()"(overrides?: CallOverrides): Promise<string>;

  chainName(overrides?: CallOverrides): Promise<string>;

  "chainName()"(overrides?: CallOverrides): Promise<string>;

  changeBundleExecutorImplementation(
    newImplementation_: PromiseOrValue<string>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "changeBundleExecutorImplementation(address,bytes)"(
    newImplementation_: PromiseOrValue<string>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeFacade(
    newFacade_: PromiseOrValue<string>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "changeFacade(address,bytes)"(
    newFacade_: PromiseOrValue<string>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeSigner(
    newSignerPubKey_: PromiseOrValue<BytesLike>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "changeSigner(bytes,bytes)"(
    newSignerPubKey_: PromiseOrValue<BytesLike>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkSignatureAndIncrementNonce(
    methodId_: PromiseOrValue<BigNumberish>,
    contractAddress_: PromiseOrValue<string>,
    signHash_: PromiseOrValue<BytesLike>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "checkSignatureAndIncrementNonce(uint8,address,bytes32,bytes)"(
    methodId_: PromiseOrValue<BigNumberish>,
    contractAddress_: PromiseOrValue<string>,
    signHash_: PromiseOrValue<BytesLike>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC1155(
    params_: IERC1155Handler.DepositERC1155ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositERC1155((address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
    params_: IERC1155Handler.DepositERC1155ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC20(
    params_: IERC20Handler.DepositERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))"(
    params_: IERC20Handler.DepositERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC721(
    params_: IERC721Handler.DepositERC721ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositERC721((address,uint256,(bytes32,bytes),string,string,bool))"(
    params_: IERC721Handler.DepositERC721ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositNative(
    params_: INativeHandler.DepositNativeParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositNative((uint256,(bytes32,bytes),string,string))"(
    params_: INativeHandler.DepositNativeParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositSBT(
    params_: ISBTHandler.DepositSBTParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositSBT((address,uint256,(bytes32,bytes),string,string))"(
    params_: ISBTHandler.DepositSBTParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  determineProxyAddress(
    salt_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "determineProxyAddress(bytes32)"(
    salt_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  facade(overrides?: CallOverrides): Promise<string>;

  "facade()"(overrides?: CallOverrides): Promise<string>;

  getSigComponents(
    methodId_: PromiseOrValue<BigNumberish>,
    contractAddress_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { chainName_: string; nonce_: BigNumber }>;

  "getSigComponents(uint8,address)"(
    methodId_: PromiseOrValue<BigNumberish>,
    contractAddress_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { chainName_: string; nonce_: BigNumber }>;

  nonces(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nonces(address,uint8)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToWithSig(
    newImplementation_: PromiseOrValue<string>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "upgradeToWithSig(address,bytes)"(
    newImplementation_: PromiseOrValue<string>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usedHashes(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "usedHashes(bytes32)"(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateChangeAddressSignature(
    methodId_: PromiseOrValue<BigNumberish>,
    contractAddress_: PromiseOrValue<string>,
    newAddress_: PromiseOrValue<string>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "validateChangeAddressSignature(uint8,address,address,bytes)"(
    methodId_: PromiseOrValue<BigNumberish>,
    contractAddress_: PromiseOrValue<string>,
    newAddress_: PromiseOrValue<string>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyMerkleLeaf(
    tokenDataLeaf_: PromiseOrValue<BytesLike>,
    bundle_: IBundler.BundleStruct,
    originHash_: PromiseOrValue<BytesLike>,
    receiver_: PromiseOrValue<string>,
    proof_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "verifyMerkleLeaf(bytes,(bytes32,bytes),bytes32,address,bytes)"(
    tokenDataLeaf_: PromiseOrValue<BytesLike>,
    bundle_: IBundler.BundleStruct,
    originHash_: PromiseOrValue<BytesLike>,
    receiver_: PromiseOrValue<string>,
    proof_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC1155(
    params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
    params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC1155Bundle(
    params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawERC1155Bundle((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
    params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    params_: IERC20Handler.WithdrawERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
    params_: IERC20Handler.WithdrawERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20Bundle(
    params_: IERC20Handler.WithdrawERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
    params_: IERC20Handler.WithdrawERC20ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    params_: IERC721Handler.WithdrawERC721ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
    params_: IERC721Handler.WithdrawERC721ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721Bundle(
    params_: IERC721Handler.WithdrawERC721ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawERC721Bundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
    params_: IERC721Handler.WithdrawERC721ParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNative(
    params_: INativeHandler.WithdrawNativeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))"(
    params_: INativeHandler.WithdrawNativeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNativeBundle(
    params_: INativeHandler.WithdrawNativeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawNativeBundle((uint256,(bytes32,bytes),bytes32,address,bytes))"(
    params_: INativeHandler.WithdrawNativeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawSBT(
    params_: ISBTHandler.WithdrawSBTParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
    params_: ISBTHandler.WithdrawSBTParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawSBTBundle(
    params_: ISBTHandler.WithdrawSBTParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawSBTBundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
    params_: ISBTHandler.WithdrawSBTParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    P(overrides?: CallOverrides): Promise<BigNumber>;

    "P()"(overrides?: CallOverrides): Promise<BigNumber>;

    __Bridge_init(
      signer_: PromiseOrValue<string>,
      bundleImplementation_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "__Bridge_init(address,address,string,address)"(
      signer_: PromiseOrValue<string>,
      bundleImplementation_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    __Bundler_init(
      bundleExecutorImplementation_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "__Bundler_init(address)"(
      bundleExecutorImplementation_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    __Signers_init(
      signer_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "__Signers_init(address,address,string)"(
      signer_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bundleExecutorImplementation(overrides?: CallOverrides): Promise<string>;

    "bundleExecutorImplementation()"(
      overrides?: CallOverrides
    ): Promise<string>;

    chainName(overrides?: CallOverrides): Promise<string>;

    "chainName()"(overrides?: CallOverrides): Promise<string>;

    changeBundleExecutorImplementation(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeBundleExecutorImplementation(address,bytes)"(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFacade(
      newFacade_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeFacade(address,bytes)"(
      newFacade_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSigner(
      newSignerPubKey_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeSigner(bytes,bytes)"(
      newSignerPubKey_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkSignatureAndIncrementNonce(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      signHash_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkSignatureAndIncrementNonce(uint8,address,bytes32,bytes)"(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      signHash_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC1155(
      params_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositERC1155((address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC20(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC721(
      params_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositERC721((address,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNative(
      params_: INativeHandler.DepositNativeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositNative((uint256,(bytes32,bytes),string,string))"(
      params_: INativeHandler.DepositNativeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositSBT(
      params_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositSBT((address,uint256,(bytes32,bytes),string,string))"(
      params_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    determineProxyAddress(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "determineProxyAddress(bytes32)"(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    facade(overrides?: CallOverrides): Promise<string>;

    "facade()"(overrides?: CallOverrides): Promise<string>;

    getSigComponents(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { chainName_: string; nonce_: BigNumber }>;

    "getSigComponents(uint8,address)"(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { chainName_: string; nonce_: BigNumber }>;

    nonces(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address,uint8)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    signer(overrides?: CallOverrides): Promise<string>;

    "signer()"(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToWithSig(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToWithSig(address,bytes)"(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    usedHashes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "usedHashes(bytes32)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateChangeAddressSignature(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      newAddress_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "validateChangeAddressSignature(uint8,address,address,bytes)"(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      newAddress_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyMerkleLeaf(
      tokenDataLeaf_: PromiseOrValue<BytesLike>,
      bundle_: IBundler.BundleStruct,
      originHash_: PromiseOrValue<BytesLike>,
      receiver_: PromiseOrValue<string>,
      proof_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "verifyMerkleLeaf(bytes,(bytes32,bytes),bytes32,address,bytes)"(
      tokenDataLeaf_: PromiseOrValue<BytesLike>,
      bundle_: IBundler.BundleStruct,
      originHash_: PromiseOrValue<BytesLike>,
      receiver_: PromiseOrValue<string>,
      proof_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC1155(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC1155Bundle(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC1155Bundle((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20Bundle(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721Bundle(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC721Bundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNative(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))"(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNativeBundle(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawNativeBundle((uint256,(bytes32,bytes),bytes32,address,bytes))"(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSBT(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSBTBundle(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawSBTBundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "DepositedERC1155(address,uint256,uint256,bytes32,bytes,string,string,bool)"(
      token?: null,
      tokenId?: null,
      amount?: null,
      salt?: null,
      bundle?: null,
      network?: null,
      receiver?: null,
      isWrapped?: null
    ): DepositedERC1155EventFilter;
    DepositedERC1155(
      token?: null,
      tokenId?: null,
      amount?: null,
      salt?: null,
      bundle?: null,
      network?: null,
      receiver?: null,
      isWrapped?: null
    ): DepositedERC1155EventFilter;

    "DepositedERC20(address,uint256,bytes32,bytes,string,string,bool)"(
      token?: null,
      amount?: null,
      salt?: null,
      bundle?: null,
      network?: null,
      receiver?: null,
      isWrapped?: null
    ): DepositedERC20EventFilter;
    DepositedERC20(
      token?: null,
      amount?: null,
      salt?: null,
      bundle?: null,
      network?: null,
      receiver?: null,
      isWrapped?: null
    ): DepositedERC20EventFilter;

    "DepositedERC721(address,uint256,bytes32,bytes,string,string,bool)"(
      token?: null,
      tokenId?: null,
      salt?: null,
      bundle?: null,
      network?: null,
      receiver?: null,
      isWrapped?: null
    ): DepositedERC721EventFilter;
    DepositedERC721(
      token?: null,
      tokenId?: null,
      salt?: null,
      bundle?: null,
      network?: null,
      receiver?: null,
      isWrapped?: null
    ): DepositedERC721EventFilter;

    "DepositedNative(uint256,bytes32,bytes,string,string)"(
      amount?: null,
      salt?: null,
      bundle?: null,
      network?: null,
      receiver?: null
    ): DepositedNativeEventFilter;
    DepositedNative(
      amount?: null,
      salt?: null,
      bundle?: null,
      network?: null,
      receiver?: null
    ): DepositedNativeEventFilter;

    "DepositedSBT(address,uint256,bytes32,bytes,string,string)"(
      token?: null,
      tokenId?: null,
      salt?: null,
      bundle?: null,
      network?: null,
      receiver?: null
    ): DepositedSBTEventFilter;
    DepositedSBT(
      token?: null,
      tokenId?: null,
      salt?: null,
      bundle?: null,
      network?: null,
      receiver?: null
    ): DepositedSBTEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "WithdrawnERC1155(address,uint256,string,uint256,bytes32,bytes,bytes32,address,bytes,bool)"(
      token?: null,
      tokenId?: null,
      tokenURI?: null,
      amount?: null,
      salt?: null,
      bundle?: null,
      originHash?: null,
      receiver?: null,
      proof?: null,
      isWrapped?: null
    ): WithdrawnERC1155EventFilter;
    WithdrawnERC1155(
      token?: null,
      tokenId?: null,
      tokenURI?: null,
      amount?: null,
      salt?: null,
      bundle?: null,
      originHash?: null,
      receiver?: null,
      proof?: null,
      isWrapped?: null
    ): WithdrawnERC1155EventFilter;

    "WithdrawnERC20(address,uint256,bytes32,bytes,bytes32,address,bytes,bool)"(
      token?: null,
      amount?: null,
      salt?: null,
      bundle?: null,
      originHash?: null,
      receiver?: null,
      proof?: null,
      isWrapped?: null
    ): WithdrawnERC20EventFilter;
    WithdrawnERC20(
      token?: null,
      amount?: null,
      salt?: null,
      bundle?: null,
      originHash?: null,
      receiver?: null,
      proof?: null,
      isWrapped?: null
    ): WithdrawnERC20EventFilter;

    "WithdrawnERC721(address,uint256,string,bytes32,bytes,bytes32,address,bytes,bool)"(
      token?: null,
      tokenId?: null,
      tokenURI?: null,
      salt?: null,
      bundle?: null,
      originHash?: null,
      receiver?: null,
      proof?: null,
      isWrapped?: null
    ): WithdrawnERC721EventFilter;
    WithdrawnERC721(
      token?: null,
      tokenId?: null,
      tokenURI?: null,
      salt?: null,
      bundle?: null,
      originHash?: null,
      receiver?: null,
      proof?: null,
      isWrapped?: null
    ): WithdrawnERC721EventFilter;

    "WithdrawnNative(uint256,bytes32,bytes,bytes32,address,bytes)"(
      amount?: null,
      salt?: null,
      bundle?: null,
      originHash?: null,
      receiver?: null,
      proof?: null
    ): WithdrawnNativeEventFilter;
    WithdrawnNative(
      amount?: null,
      salt?: null,
      bundle?: null,
      originHash?: null,
      receiver?: null,
      proof?: null
    ): WithdrawnNativeEventFilter;

    "WithdrawnSBT(address,uint256,string,bytes32,bytes,bytes32,address,bytes)"(
      token?: null,
      tokenId?: null,
      tokenURI?: null,
      salt?: null,
      bundle?: null,
      originHash?: null,
      receiver?: null,
      proof?: null
    ): WithdrawnSBTEventFilter;
    WithdrawnSBT(
      token?: null,
      tokenId?: null,
      tokenURI?: null,
      salt?: null,
      bundle?: null,
      originHash?: null,
      receiver?: null,
      proof?: null
    ): WithdrawnSBTEventFilter;
  };

  estimateGas: {
    P(overrides?: CallOverrides): Promise<BigNumber>;

    "P()"(overrides?: CallOverrides): Promise<BigNumber>;

    __Bridge_init(
      signer_: PromiseOrValue<string>,
      bundleImplementation_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "__Bridge_init(address,address,string,address)"(
      signer_: PromiseOrValue<string>,
      bundleImplementation_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __Bundler_init(
      bundleExecutorImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "__Bundler_init(address)"(
      bundleExecutorImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __Signers_init(
      signer_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "__Signers_init(address,address,string)"(
      signer_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bundleExecutorImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "bundleExecutorImplementation()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainName(overrides?: CallOverrides): Promise<BigNumber>;

    "chainName()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeBundleExecutorImplementation(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "changeBundleExecutorImplementation(address,bytes)"(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeFacade(
      newFacade_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "changeFacade(address,bytes)"(
      newFacade_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeSigner(
      newSignerPubKey_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "changeSigner(bytes,bytes)"(
      newSignerPubKey_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkSignatureAndIncrementNonce(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      signHash_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "checkSignatureAndIncrementNonce(uint8,address,bytes32,bytes)"(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      signHash_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC1155(
      params_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositERC1155((address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC20(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC721(
      params_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositERC721((address,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositNative(
      params_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositNative((uint256,(bytes32,bytes),string,string))"(
      params_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositSBT(
      params_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositSBT((address,uint256,(bytes32,bytes),string,string))"(
      params_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    determineProxyAddress(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "determineProxyAddress(bytes32)"(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facade(overrides?: CallOverrides): Promise<BigNumber>;

    "facade()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSigComponents(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSigComponents(uint8,address)"(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address,uint8)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    "signer()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToWithSig(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "upgradeToWithSig(address,bytes)"(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usedHashes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "usedHashes(bytes32)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateChangeAddressSignature(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      newAddress_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "validateChangeAddressSignature(uint8,address,address,bytes)"(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      newAddress_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyMerkleLeaf(
      tokenDataLeaf_: PromiseOrValue<BytesLike>,
      bundle_: IBundler.BundleStruct,
      originHash_: PromiseOrValue<BytesLike>,
      receiver_: PromiseOrValue<string>,
      proof_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "verifyMerkleLeaf(bytes,(bytes32,bytes),bytes32,address,bytes)"(
      tokenDataLeaf_: PromiseOrValue<BytesLike>,
      bundle_: IBundler.BundleStruct,
      originHash_: PromiseOrValue<BytesLike>,
      receiver_: PromiseOrValue<string>,
      proof_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC1155(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC1155Bundle(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawERC1155Bundle((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20Bundle(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC721Bundle(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawERC721Bundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNative(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))"(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNativeBundle(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawNativeBundle((uint256,(bytes32,bytes),bytes32,address,bytes))"(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawSBT(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawSBTBundle(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawSBTBundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    P(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "P()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __Bridge_init(
      signer_: PromiseOrValue<string>,
      bundleImplementation_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "__Bridge_init(address,address,string,address)"(
      signer_: PromiseOrValue<string>,
      bundleImplementation_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __Bundler_init(
      bundleExecutorImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "__Bundler_init(address)"(
      bundleExecutorImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __Signers_init(
      signer_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "__Signers_init(address,address,string)"(
      signer_: PromiseOrValue<string>,
      facade_: PromiseOrValue<string>,
      chainName_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bundleExecutorImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bundleExecutorImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chainName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeBundleExecutorImplementation(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "changeBundleExecutorImplementation(address,bytes)"(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeFacade(
      newFacade_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "changeFacade(address,bytes)"(
      newFacade_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeSigner(
      newSignerPubKey_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "changeSigner(bytes,bytes)"(
      newSignerPubKey_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkSignatureAndIncrementNonce(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      signHash_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "checkSignatureAndIncrementNonce(uint8,address,bytes32,bytes)"(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      signHash_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC1155(
      params_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositERC1155((address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC20(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositERC20((address,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC721(
      params_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositERC721((address,uint256,(bytes32,bytes),string,string,bool))"(
      params_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositNative(
      params_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositNative((uint256,(bytes32,bytes),string,string))"(
      params_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositSBT(
      params_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositSBT((address,uint256,(bytes32,bytes),string,string))"(
      params_: ISBTHandler.DepositSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    determineProxyAddress(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "determineProxyAddress(bytes32)"(
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facade()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSigComponents(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSigComponents(uint8,address)"(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address,uint8)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "signer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToWithSig(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToWithSig(address,bytes)"(
      newImplementation_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usedHashes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "usedHashes(bytes32)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateChangeAddressSignature(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      newAddress_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "validateChangeAddressSignature(uint8,address,address,bytes)"(
      methodId_: PromiseOrValue<BigNumberish>,
      contractAddress_: PromiseOrValue<string>,
      newAddress_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyMerkleLeaf(
      tokenDataLeaf_: PromiseOrValue<BytesLike>,
      bundle_: IBundler.BundleStruct,
      originHash_: PromiseOrValue<BytesLike>,
      receiver_: PromiseOrValue<string>,
      proof_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "verifyMerkleLeaf(bytes,(bytes32,bytes),bytes32,address,bytes)"(
      tokenDataLeaf_: PromiseOrValue<BytesLike>,
      bundle_: IBundler.BundleStruct,
      originHash_: PromiseOrValue<BytesLike>,
      receiver_: PromiseOrValue<string>,
      proof_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC1155(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawERC1155((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC1155Bundle(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawERC1155Bundle((address,uint256,string,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC1155Handler.WithdrawERC1155ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawERC20((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20Bundle(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawERC20Bundle((address,uint256,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC20Handler.WithdrawERC20ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawERC721((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721Bundle(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawERC721Bundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes,bool))"(
      params_: IERC721Handler.WithdrawERC721ParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNative(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawNative((uint256,(bytes32,bytes),bytes32,address,bytes))"(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNativeBundle(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawNativeBundle((uint256,(bytes32,bytes),bytes32,address,bytes))"(
      params_: INativeHandler.WithdrawNativeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSBT(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawSBT((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSBTBundle(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawSBTBundle((address,uint256,string,(bytes32,bytes),bytes32,address,bytes))"(
      params_: ISBTHandler.WithdrawSBTParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
