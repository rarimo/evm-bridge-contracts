/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ConstantsInterface extends utils.Interface {
  functions: {
    "COMMISSION_ADDRESS()": FunctionFragment;
    "ETHEREUM_ADDRESS()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COMMISSION_ADDRESS"
      | "COMMISSION_ADDRESS()"
      | "ETHEREUM_ADDRESS"
      | "ETHEREUM_ADDRESS()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "COMMISSION_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMMISSION_ADDRESS()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETHEREUM_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETHEREUM_ADDRESS()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "COMMISSION_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMMISSION_ADDRESS()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETHEREUM_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETHEREUM_ADDRESS()",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Constants extends BaseContract {
  contractName: "Constants";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConstantsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COMMISSION_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    "COMMISSION_ADDRESS()"(overrides?: CallOverrides): Promise<[string]>;

    ETHEREUM_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    "ETHEREUM_ADDRESS()"(overrides?: CallOverrides): Promise<[string]>;
  };

  COMMISSION_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "COMMISSION_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  ETHEREUM_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "ETHEREUM_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    COMMISSION_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "COMMISSION_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    ETHEREUM_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "ETHEREUM_ADDRESS()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    COMMISSION_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "COMMISSION_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    ETHEREUM_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "ETHEREUM_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    COMMISSION_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "COMMISSION_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ETHEREUM_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ETHEREUM_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
